import com.mongodb.BasicDBObject;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import java.net.UnknownHostException;
import java.util.Scanner;
import com.mongodb.*;
import java.util.Scanner;
import org.bson.Document;

public class Dms {
    private static Scanner scanner;

    void Insert() {
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
        MongoDatabase database = mongoClient.getDatabase("Dms");
        MongoCollection collection = database.getCollection("Student");
        int response = 0;
        while (response != 5) {
            MongoCursor cursor = collection.find().iterator();
            System.out.println("1. Display");
            System.out.println("2. Insert");
            System.out.println("3. Update");
            System.out.println("4. Delete");
            System.out.println("5. Exit");
            response = sc.nextInt();
            String value;
            switch (response) {
                case 1:
                    while (cursor.hasNext()) {
                        Document document = (Document) cursor.next();
                        String studentName = document.getString("name");
                        String studentAge = document.getString("branch");
                        System.out.println("Name: " + studentName + ", branch: " + studentAge);
                    }
                    cursor.close();
                    break;
                case 2:
                    String name;
                    String branch;
                    System.out.println("Enter name: ");
                    name = sc.next();
                    System.out.println("Enter branch: ");
                    branch = sc.next();
                    Document doc1 = new Document("name", name).append("branch", branch);
                    collection.insertOne(doc1);
                    break;
                case 3:
                    int response2;
                    String updE;
                    String updN;
                    System.out.println("1. Update Name");
                    System.out.println("2. Update Branch");
                    response2 = sc.nextInt();
                    if (response2 == 1) {
                        System.out.println("Enter value to update(update): ");
                        updE = sc.next();
                        System.out.println("Enter value: ");
                        updN = sc.next();
                        collection.updateOne(Filters.eq("branch", updE), Updates.set("name", updN));
                    } else if (response2 == 2) {
                        System.out.println("Enter value to update(name): ");
                        updE = sc.next();
                        System.out.println("Enter value: ");
                        updN = sc.next();
                        collection.updateOne(Filters.eq("name", updE), Updates.set("branch", updN));
                    }
                    break;
                case 4:
                    System.out.println("Enter name to delete:");
                    String Name = sc.next();
                    collection.deleteOne(Filters.eq("name", Name));
                    break;
                case 5:
                    sc.close();
                    mongoClient.close();
                    break;
                default:
                    System.out.println("Incorrect Response");
            }
        }
    }
}
